name: CI

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: pnpm/action-setup@v4
        with:
          version: latest
          run_install: true
      - run: pnpm lint

  format:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: pnpm/action-setup@v4
        with:
          version: latest
          run_install: true
      - run: pnpm format

  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: pnpm/action-setup@v4
        with:
          version: latest
          run_install: true
      - run: pnpm test:ci

  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: pnpm/action-setup@v4
        with:
          version: latest
          run_install: true
      - run: pnpm build

  k8s-validate:
    runs-on: ubuntu-latest
    name: Validate Kubernetes Manifests
    steps:
      - uses: actions/checkout@v4

      - name: Setup Kustomize
        uses: multani/action-setup-kustomize@v1
        with:
          version: 5.4.3

      - name: Setup kubeconform
        run: |
          wget https://github.com/yannh/kubeconform/releases/latest/download/kubeconform-linux-amd64.tar.gz
          tar xf kubeconform-linux-amd64.tar.gz
          sudo cp kubeconform /usr/local/bin

      - name: Setup kube-score
        run: |
          wget https://github.com/zegl/kube-score/releases/download/v1.17.0/kube-score_1.17.0_linux_amd64.tar.gz
          tar -xzf kube-score_1.17.0_linux_amd64.tar.gz
          sudo mv kube-score /usr/local/bin/

      - name: Setup yq
        run: |
          wget -qO /usr/local/bin/yq https://github.com/mikefarah/yq/releases/latest/download/yq_linux_amd64
          sudo chmod +x /usr/local/bin/yq

      - name: Validate YAML Syntax
        run: |
          echo "üîç Validating YAML syntax..."
          find k8s -name "*.yaml" -o -name "*.yml" | while read file; do
            echo "Checking $file"
            yq eval . "$file" > /dev/null || exit 1
          done
          echo "‚úÖ All YAML files are valid"

      - name: Validate Kustomize Build - Base
        run: |
          echo "üîß Validating base kustomization..."
          cd k8s/apps/portfolio/base
          kustomize build . > /tmp/base-output.yaml
          echo "‚úÖ Base kustomization builds successfully"

      - name: Validate Kustomize Build - Dev
        run: |
          echo "üîß Validating dev overlay..."
          cd k8s/apps/portfolio/overlays/dev
          kustomize build . > /tmp/dev-output.yaml
          echo "‚úÖ Dev overlay builds successfully"

      - name: Validate Kustomize Build - Staging
        run: |
          echo "üîß Validating staging overlay..."
          cd k8s/apps/portfolio/overlays/staging
          kustomize build . > /tmp/staging-output.yaml
          echo "‚úÖ Staging overlay builds successfully"

      - name: Validate Kustomize Build - Prod
        run: |
          echo "üîß Validating production overlay..."
          cd k8s/apps/portfolio/overlays/prod
          kustomize build . > /tmp/prod-output.yaml
          echo "‚úÖ Production overlay builds successfully"

      - name: Validate Kubernetes Schema
        run: |
          echo "üìã Validating Kubernetes schema compliance with kubeconform..."
          # Filter out Config Connector CRDs and other resources that aren't standard K8s
          grep -v -E "apiVersion: (iam\.cnrm\.cloud\.google\.com|sql\.cnrm\.cloud\.google\.com)" /tmp/base-output.yaml | \
            grep -v -E "kind: (IAM|SQL)" > /tmp/base-k8s-only.yaml || true
          grep -v -E "apiVersion: (iam\.cnrm\.cloud\.google\.com|sql\.cnrm\.cloud\.google\.com)" /tmp/dev-output.yaml | \
            grep -v -E "kind: (IAM|SQL)" > /tmp/dev-k8s-only.yaml || true
          grep -v -E "apiVersion: (iam\.cnrm\.cloud\.google\.com|sql\.cnrm\.cloud\.google\.com)" /tmp/staging-output.yaml | \
            grep -v -E "kind: (IAM|SQL)" > /tmp/staging-k8s-only.yaml || true
          grep -v -E "apiVersion: (iam\.cnrm\.cloud\.google\.com|sql\.cnrm\.cloud\.google\.com)" /tmp/prod-output.yaml | \
            grep -v -E "kind: (IAM|SQL)" > /tmp/prod-k8s-only.yaml || true

          kubeconform -summary -verbose /tmp/base-k8s-only.yaml || exit 1
          kubeconform -summary -verbose /tmp/dev-k8s-only.yaml || exit 1
          kubeconform -summary -verbose /tmp/staging-k8s-only.yaml || exit 1
          kubeconform -summary -verbose /tmp/prod-k8s-only.yaml || exit 1
          echo "‚úÖ Standard Kubernetes resources are schema compliant"

      - name: Security and Best Practice Check
        run: |
          echo "üîí Running security and best practice checks..."
          kube-score score /tmp/base-output.yaml --ignore-test pod-networkpolicy --ignore-test container-image-pull-policy
          kube-score score /tmp/dev-output.yaml --ignore-test pod-networkpolicy --ignore-test container-image-pull-policy
          kube-score score /tmp/staging-output.yaml --ignore-test pod-networkpolicy --ignore-test container-image-pull-policy
          kube-score score /tmp/prod-output.yaml --ignore-test pod-networkpolicy --ignore-test container-image-pull-policy
          echo "‚úÖ Security and best practice checks completed"

      - name: Validate Config Connector CRDs
        run: |
          echo "‚òÅÔ∏è  Validating Config Connector CRDs..."
          # Check for required fields in SQLInstance CRDs
          yq eval '.spec.databaseVersion' k8s/apps/portfolio/base/cloudsql-instance.yaml | grep -q "POSTGRES_15" || exit 1
          yq eval '.spec.region' k8s/apps/portfolio/base/cloudsql-instance.yaml | grep -q "us-central1" || exit 1
          yq eval '.spec.settings.tier' k8s/apps/portfolio/base/cloudsql-instance.yaml | grep -q "db-f1-micro" || exit 1
          echo "‚úÖ Config Connector CRDs are valid"

      - name: Check for Placeholder Values
        run: |
          echo "üîç Checking for placeholder values that need replacement..."
          if grep -r "PROJECT_ID\|your-project-id\|change-me" k8s/ --exclude-dir=".git" --include="*.yaml" --include="*.yml"; then
            echo "‚ùå Found placeholder values that need to be replaced before deployment"
            echo "Please replace PROJECT_ID, your-project-id, and change-me values with actual values"
            exit 1
          else
            echo "‚úÖ No placeholder values found"
          fi

      - name: Upload Validation Artifacts
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: k8s-validation-outputs
          path: |
            /tmp/*-output.yaml
          retention-days: 7
