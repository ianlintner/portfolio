name: CI

on:
  push:
    branches: [main, develop, staging]
    tags:
      - "v*"
  pull_request:
    branches: [main]

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: pnpm/action-setup@v4
        with:
          version: latest
          run_install: true
      - run: pnpm lint

  format:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: pnpm/action-setup@v4
        with:
          version: latest
          run_install: true
      - run: pnpm format

  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: pnpm/action-setup@v4
        with:
          version: latest
          run_install: true
      - run: pnpm test:ci

  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: pnpm/action-setup@v4
        with:
          version: latest
          run_install: true
      - name: Generate Prisma Client
        run: pnpm db:generate
      - name: Build Next.js
        run: pnpm build

  docker:
    runs-on: ubuntu-latest
    needs: [build]
    if: ${{ github.event_name == 'push' && !startsWith(github.event.head_commit.message, 'ci:') }}
    steps:
      - uses: actions/checkout@v4

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ github.repository }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

      - name: Update Kubernetes manifest with new image tag
        run: |
          IMAGE_TAG=$(echo "${{ steps.meta.outputs.tags }}" | head -n1)
          echo "Using image tag: $IMAGE_TAG"
          yq -i ".spec.template.spec.containers[0].image = \"$IMAGE_TAG\"" k8s/apps/portfolio/base/deployment.yaml

      - name: Commit and push updated manifest
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add k8s/apps/portfolio/base/deployment.yaml
          git commit -m "ci: update deployment manifest with new image $IMAGE_TAG" || echo "No changes to commit"
          git push

  k8s-validate:
    runs-on: ubuntu-latest
    name: Validate Kubernetes Manifests
    steps:
      - uses: actions/checkout@v4

      - name: Setup Kustomize
        uses: multani/action-setup-kustomize@v1
        with:
          version: 5.4.3

      - name: Setup kubeconform
        run: |
          wget https://github.com/yannh/kubeconform/releases/latest/download/kubeconform-linux-amd64.tar.gz
          tar xf kubeconform-linux-amd64.tar.gz
          sudo cp kubeconform /usr/local/bin

      - name: Setup kube-score
        run: |
          wget https://github.com/zegl/kube-score/releases/download/v1.17.0/kube-score_1.17.0_linux_amd64.tar.gz
          tar -xzf kube-score_1.17.0_linux_amd64.tar.gz
          sudo mv kube-score /usr/local/bin/

      - name: Setup yq
        run: |
          wget -qO /usr/local/bin/yq https://github.com/mikefarah/yq/releases/latest/download/yq_linux_amd64
          sudo chmod +x /usr/local/bin/yq

      - name: Validate YAML Syntax
        run: |
          echo "üîç Validating YAML syntax..."
          find k8s -name "*.yaml" -o -name "*.yml" | while read file; do
            echo "Checking $file"
            yq eval . "$file" > /dev/null || exit 1
          done
          echo "‚úÖ All YAML files are valid"

      - name: Validate Kustomize Build - Base
        run: |
          echo "üîß Validating base kustomization..."
          cd k8s/apps/portfolio/base
          kustomize build . > /tmp/base-output.yaml
          echo "‚úÖ Base kustomization builds successfully"

      - name: Validate Kustomize Build - Dev
        run: |
          echo "üîß Validating dev overlay..."
          cd k8s/apps/portfolio/overlays/portfolio-dev
          kustomize build . > /tmp/dev-output.yaml
          echo "‚úÖ Dev overlay builds successfully"

      - name: Validate Kustomize Build - Prod
        run: |
          echo "üîß Validating production overlay..."
          cd k8s/apps/portfolio/overlays/portfolio-prod
          kustomize build . > /tmp/prod-output.yaml
          echo "‚úÖ Production overlay builds successfully"

      - name: Validate Kubernetes Schema
        run: |
          echo "üìã Validating Kubernetes schema compliance with kubeconform..."
          # Use kubeconform's built-in skip patterns to ignore Config Connector CRDs and Istio CRDs
          echo "Validating base manifests..."
          kubeconform -summary -skip 'SQLInstance,SQLDatabase,SQLUser,IAMPolicy,IAMServiceAccount,IAMServiceAccountKey,IAMPolicyMember,BackendConfig,ManagedCertificate,ComputeGlobalAddress,FrontendConfig,Certificate,ComputeAddress,Gateway,AuthorizationPolicy,DNSManagedZone,VirtualService,DNSRecordSet' /tmp/base-output.yaml || exit 1
          echo "Validating dev manifests..."
          kubeconform -summary -skip 'SQLInstance,SQLDatabase,SQLUser,IAMPolicy,IAMServiceAccount,IAMServiceAccountKey,IAMPolicyMember,BackendConfig,ManagedCertificate,ComputeGlobalAddress,FrontendConfig,Certificate,ComputeAddress,Gateway,AuthorizationPolicy,DNSManagedZone,VirtualService,DNSRecordSet' /tmp/dev-output.yaml || exit 1
          echo "Validating prod manifests..."
          kubeconform -summary -skip 'SQLInstance,SQLDatabase,SQLUser,IAMPolicy,IAMServiceAccount,IAMServiceAccountKey,IAMPolicyMember,BackendConfig,ManagedCertificate,ComputeGlobalAddress,FrontendConfig,Certificate,ComputeAddress,Gateway,AuthorizationPolicy,DNSManagedZone,VirtualService,DNSRecordSet' /tmp/prod-output.yaml || exit 1
          echo "‚úÖ Standard Kubernetes resources are schema compliant"

      - name: Security and Best Practice Check
        run: |
          echo "üîí Running security and best practice checks..."
          echo "Note: Security checks are informational and will not fail the pipeline"
          kube-score score /tmp/base-output.yaml --ignore-test pod-networkpolicy --ignore-test container-image-pull-policy || echo "‚ö†Ô∏è Security recommendations found for base environment"
          kube-score score /tmp/dev-output.yaml --ignore-test pod-networkpolicy --ignore-test container-image-pull-policy || echo "‚ö†Ô∏è Security recommendations found for dev environment"
          kube-score score /tmp/prod-output.yaml --ignore-test pod-networkpolicy --ignore-test container-image-pull-policy || echo "‚ö†Ô∏è Security recommendations found for prod environment"
          echo "‚úÖ Security and best practice checks completed (informational)"

      - name: Validate Config Connector CRDs
        run: |
          echo "‚òÅÔ∏è  Validating Config Connector CRDs..."
          # Check for required fields in SQLInstance CRDs
          yq eval '.spec.databaseVersion' k8s/apps/portfolio/base/cloudsql-instance.yaml | grep -q "POSTGRES_15" || exit 1
          yq eval '.spec.region' k8s/apps/portfolio/base/cloudsql-instance.yaml | grep -q "us-central1" || exit 1
          yq eval '.spec.settings.tier' k8s/apps/portfolio/base/cloudsql-instance.yaml | grep -q "db-f1-micro" || exit 1
          echo "‚úÖ Config Connector CRDs are valid"

      - name: Check for Placeholder Values
        run: |
          echo "üîç Checking for placeholder values that need replacement..."
          echo "Note: This is an informational check for deployment readiness"
          if grep -r "PROJECT_ID\|your-project-id\|change-me" k8s/ --exclude-dir=".git" --include="*.yaml" --include="*.yml"; then
            echo "‚ö†Ô∏è Found placeholder values that need to be replaced before actual deployment"
            echo "‚ÑπÔ∏è This is expected in template manifests and will not fail the validation pipeline"
            echo "üìù Replace PROJECT_ID, your-project-id, and change-me values with actual values before deploying to production"
          else
            echo "‚úÖ No placeholder values found - manifests are deployment-ready"
          fi
          echo "‚úÖ Placeholder check completed (informational)"

      - name: Upload Validation Artifacts
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: k8s-validation-outputs
          path: |
            /tmp/*-output.yaml
          retention-days: 7
